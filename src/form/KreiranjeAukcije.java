/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;

import domain.Antikvitet;
import domain.Aukcija;
import domain.Mesto;
import domain.ProdajaAntikviteta;
import domain.Valuta;
import domain.Vlasnik;
import forms.util.FormView;
import forms.util.ModelTabele;
import java.awt.Color;
import java.awt.HeadlessException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import komunikacija.Komunikacija;
import model.AntikvitetiTableModel;
import model.AukcijeTableModel;
import model.nit.NitTabele;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Ilija Dumanović
 */
public class KreiranjeAukcije extends javax.swing.JFrame {

    /**
     * Creates new form KreiranjeAukcije
     */
    List<ProdajaAntikviteta> prodati = new ArrayList<>();
    List<ProdajaAntikviteta> prodati2 = new ArrayList<>();
    List<ProdajaAntikviteta> ukupno = new ArrayList<>();
    final DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    PretrazivanjeAukcije pa;
    Aukcija a;
    AukcijeTableModel atm;
    LocalDate datum;
    int formView = -1;

    public KreiranjeAukcije(int formView) {
        initComponents();
        cmbMesto.setSelectedItem(null);
        cmbAntikviteti.setSelectedItem(null);
        cmbValuta.setSelectedItem(null);
        tblProdati.setModel(new AukcijeTableModel(prodati));
        populateView(formView);
        populateForm();
    }

    public KreiranjeAukcije(int formView, Aukcija a, PretrazivanjeAukcije pa) throws HeadlessException {
        initComponents();
        populateForm();
        setAukcija(a);
        this.a = a;
        this.pa = pa;
        this.formView = formView;
        populateTable();
        populateView(formView);
        setVisible(true);
        JOptionPane.showMessageDialog(this, "Sistem je učitao odaranu aukciju.");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNaziv = new javax.swing.JTextField();
        txtDatum = new javax.swing.JTextField();
        cmbMesto = new javax.swing.JComboBox<>();
        btnSacuvaj = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProdati = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cmbAntikviteti = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtCena = new javax.swing.JTextField();
        btnUnesiAntikvitet = new javax.swing.JButton();
        cmbValuta = new javax.swing.JComboBox<>();
        btnIzmeni = new javax.swing.JButton();
        btnAzuriraj = new javax.swing.JButton();
        btnIzbaciStavku = new javax.swing.JButton();
        btnObrisiAukciju = new javax.swing.JButton();
        btnSveStavke = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Kreiranje aukcije");

        jLabel1.setText("Naziv:");

        jLabel2.setText("Datum održavanja:");

        jLabel3.setText("Mesto održavanja:");

        txtDatum.setForeground(new java.awt.Color(153, 153, 153));
        txtDatum.setText("format: dd-mm-gggg");
        txtDatum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDatumMouseClicked(evt);
            }
        });
        txtDatum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDatumActionPerformed(evt);
            }
        });

        cmbMesto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSacuvaj.setText("Sacuvaj podatke");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        tblProdati.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblProdati);

        jLabel4.setText("Spisak antikviteta:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Dodaj prodat antikvitet"));

        jLabel6.setText("Antikvitet:");

        cmbAntikviteti.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Cena prodaje:");

        btnUnesiAntikvitet.setText("Unesi prodat antikvitet u listu");
        btnUnesiAntikvitet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnesiAntikvitetActionPerformed(evt);
            }
        });

        cmbValuta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUnesiAntikvitet, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbAntikviteti, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCena, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbValuta, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAntikviteti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtCena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbValuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnUnesiAntikvitet)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        btnIzmeni.setText("Omogući izmenu");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnAzuriraj.setText("Ažuriraj aukciju");
        btnAzuriraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAzurirajActionPerformed(evt);
            }
        });

        btnIzbaciStavku.setText("Izbaci stavku sa spiska");
        btnIzbaciStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzbaciStavkuActionPerformed(evt);
            }
        });

        btnObrisiAukciju.setText("Obrisi aukciju");
        btnObrisiAukciju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiAukcijuActionPerformed(evt);
            }
        });

        btnSveStavke.setText("Obriši sve stavke");
        btnSveStavke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSveStavkeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(35, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtDatum, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNaziv, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbMesto, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(btnSacuvaj)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnIzmeni)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnAzuriraj)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnObrisiAukciju)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnIzbaciStavku)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSveStavke)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cmbMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIzbaciStavku)
                    .addComponent(btnSveStavke))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSacuvaj)
                    .addComponent(btnIzmeni)
                    .addComponent(btnAzuriraj)
                    .addComponent(btnObrisiAukciju))
                .addGap(54, 54, 54))
        );

        setSize(new java.awt.Dimension(864, 571));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        try {
            if (proveraPodataka()) {
                Aukcija a = getAukcija();
                int id = Komunikacija.getInstance().KreirajAukciju(a);
                a.setId(id);

                for (ProdajaAntikviteta pa : prodati) {
                    try {
                        pa.setAukcija(a);
                        Komunikacija.getInstance().KreirajProdajaAntikviteta(pa);

                    } catch (Exception ex) {
                        Logger.getLogger(KreiranjeAukcije.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                txtNaziv.setText("");
                txtDatum.setText("");
                cmbMesto.setSelectedItem(null);
                JOptionPane.showMessageDialog(this, "Sistem je zapamtio aukciju. Uspešno napravljana aukcija i dodato " + prodati.size() + " prodatih antikviteta");
                prodati.clear();
                ((AukcijeTableModel) tblProdati.getModel()).obrisiSve();
            }
        } catch (Exception ex) {
            Logger.getLogger(KreiranjeAukcije.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void txtDatumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDatumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDatumActionPerformed

    private void btnUnesiAntikvitetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnesiAntikvitetActionPerformed
        if (cmbAntikviteti.getSelectedItem() != null && cmbValuta.getSelectedItem() != null && !(txtCena.getText().isEmpty())) {
            try {
                double brojcina = Double.parseDouble(txtCena.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "U polju za vrednost se moraju nalaziti isključivo brojevi!");
                return;
            }
            ProdajaAntikviteta prod = new ProdajaAntikviteta((Antikvitet) cmbAntikviteti.getSelectedItem(), new Aukcija(), BigDecimal.valueOf(Double.valueOf(txtCena.getText())), (Valuta) cmbValuta.getSelectedItem());
            if (!prodati.contains(prod)) {
                if (formView == -1) {
                    if (!prodati.contains(prod)) {
                        prodati.add(prod);
                        ((AukcijeTableModel) tblProdati.getModel()).dodajProdate(prodati);
                    } else {
                        JOptionPane.showMessageDialog(this, "Ovaj antikvitet se već prodao na ovoj aukciji.");
                    }
                } else {
                    if (!prodati2.contains(prod)) {
                        prodati2.add(prod);
                        ukupno = new ArrayList<>(prodati);
                        ukupno.addAll(prodati2);
                        ((AukcijeTableModel) tblProdati.getModel()).dodajProdate(ukupno);
                    } else {
                        JOptionPane.showMessageDialog(this, "Ovaj antikvitet se već prodao na ovoj aukciji.");
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Odabrani antikvitet je već prodat na ovoj aukciji!");
            }
            txtCena.setText("");
            cmbAntikviteti.setSelectedItem(null);
            cmbValuta.setSelectedItem(null);
        } else {
            JOptionPane.showMessageDialog(this, "Neispravni podaci za prodat antikvitet! Proverite podatke.");
        }
    }//GEN-LAST:event_btnUnesiAntikvitetActionPerformed

    private void txtDatumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDatumMouseClicked
        if (formView == -1) {

            txtDatum.setText("");
            txtDatum.setForeground(Color.black);
        }
    }//GEN-LAST:event_txtDatumMouseClicked

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        populateView(FormView.FORM_EDIT_MODE);
        txtDatum.setText(a.getDatumOdrzavanja().format(format));
        txtDatum.setForeground(Color.black);
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnAzurirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAzurirajActionPerformed
        try {
            if (proveraPodataka()) {
                int br = Komunikacija.getInstance().ZapamtiAukciju(getAukcija());
                for (ProdajaAntikviteta pa : prodati2) {
                    try {
                        pa.setAukcija(a);
                        Komunikacija.getInstance().KreirajProdajaAntikviteta(pa);

                    } catch (Exception ex) {
                        Logger.getLogger(KreiranjeAukcije.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                prodati2.clear();

                if (br > 0) {
                    JOptionPane.showMessageDialog(this, "Sistem je zapamtio aukciju.", "Poruka", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti aukciju! Pokušajte ponovo.", "Poruka", JOptionPane.ERROR_MESSAGE);
                }
                if (pa != null) {
                    pa.pretragaAukcija();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(KreiranjeVlasnika.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAzurirajActionPerformed

    private void btnObrisiAukcijuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiAukcijuActionPerformed
        try {
            if (prodati.size() == 0) {
                int br = Komunikacija.getInstance().ObrisiAukciju(getAukcija());
                if (br > 0) {
                    JOptionPane.showMessageDialog(this, "Objekat je uspešno obrisan iz baze.", "Poruka", JOptionPane.OK_OPTION);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Objekat je nije obirsan iz baze! Pokušajte ponovo.", "Poruka", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Sistem ne može da obriše aukciju jer ima poradate antikvitete. Morate prvo obrisati sve prodate antivkitete sa ove aukcije.");
            }
        } catch (Exception ex) {
            Logger.getLogger(KreiranjeVlasnika.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnObrisiAukcijuActionPerformed

    private void btnIzbaciStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzbaciStavkuActionPerformed
        int broj = obrisiAntikvitetSaSpiska(tblProdati.getSelectedRow());
        if (broj != -1) {
            JOptionPane.showMessageDialog(this, "Uspešno obrisan");
        }
        uzmiProdateAntikvitete();
        ukupno=new ArrayList<>(prodati);
        ukupno.addAll(prodati2);
        ((AukcijeTableModel) tblProdati.getModel()).dodajProdate(ukupno);
    }//GEN-LAST:event_btnIzbaciStavkuActionPerformed

    private void btnSveStavkeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSveStavkeActionPerformed

        uzmiProdateAntikvitete();
        int broj = 0;
        for (int i = 0; i < prodati.size(); i++) {
            broj = obrisiAntikvitetSaSpiska(i);
        }
        uzmiProdateAntikvitete();
        ((AukcijeTableModel) tblProdati.getModel()).dodajProdate(prodati);
        if (broj > 0) {
            JOptionPane.showMessageDialog(this, "Uspešno obrisani svi antikviteti");
        } else {
            JOptionPane.showMessageDialog(this, "Nisu obrisani");
        }

    }//GEN-LAST:event_btnSveStavkeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAzuriraj;
    private javax.swing.JButton btnIzbaciStavku;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisiAukciju;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JButton btnSveStavke;
    private javax.swing.JButton btnUnesiAntikvitet;
    private javax.swing.JComboBox<String> cmbAntikviteti;
    private javax.swing.JComboBox<String> cmbMesto;
    private javax.swing.JComboBox<String> cmbValuta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProdati;
    private javax.swing.JTextField txtCena;
    private javax.swing.JTextField txtDatum;
    private javax.swing.JTextField txtNaziv;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        try {
            uzmiProdateAntikvitete();
            atm = new AukcijeTableModel(prodati, new Pair<String, String>("aukcija_id", a.getId() + ""));
            atm.promeniSignal();
            tblProdati.setModel(atm);
            System.out.println("forms.KreiranjeVlasnika.populateTable(), postavio model za tbl");
            //n = new NitTabele(tblAntikviteti, ModelTabele.ANTIKVITET_MODEL);
        } catch (Exception ex) {
            Logger.getLogger(KreiranjeVlasnika.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setAukcija(Aukcija a) {
        txtNaziv.setText(a.getNaziv());
        txtDatum.setText(a.getDatumOdrzavanja().toString());
        cmbMesto.getModel().setSelectedItem(a.getMesto());
    }

    private void populateForm() {
        try {
            List<Mesto> mesta = Komunikacija.getInstance().UcitajListuMesta();
            List<Antikvitet> antikvitet = Komunikacija.getInstance().UcitajAntikvitete();
            cmbAntikviteti.setModel(new DefaultComboBoxModel(antikvitet.toArray()));
            cmbValuta.setModel(new DefaultComboBoxModel(Valuta.values()));
            cmbMesto.setModel(new DefaultComboBoxModel(mesta.toArray()));
            AutoCompleteDecorator.decorate(cmbMesto);
            AutoCompleteDecorator.decorate(cmbAntikviteti);
            AutoCompleteDecorator.decorate(cmbValuta);
        } catch (Exception ex) {
            Logger.getLogger(KreiranjeAukcije.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean proveraPodataka() {

        if (txtNaziv.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti aukciju! Morate popuniti polje \"Naziv\"!");
            return false;
        }
        try {
            datum = LocalDate.parse(txtDatum.getText(), format);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti aukciju! Neispravno unet datum! Unesite datum u formatu dd-mm-gggg");
            return false;
        }
        if (datum.isAfter(LocalDate.now())) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti aukciju! Neispravno unet datum! Unesite datum pre trenutnog!");
            return false;
        }
        return true;
    }

    private void uzmiProdateAntikvitete() {
        try {
            System.out.println("forms.KreiranjeVlasnika.uzmiAntikvitete(),vlasnik ID je: " + a.getId());
            prodati = Komunikacija.getInstance().UcitajSveProdajaAntikvitetaSaParametrom(new Pair<String, String>("aukcija_id", String.valueOf(a.getId())));
        } catch (Exception ex) {
            Logger.getLogger(PretrazivanjeAntikviteta.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void populateView(int formView) {
        switch (formView) {
            case FormView.FORM_ADD_MODE:
                btnIzbaciStavku.setVisible(false);
                btnObrisiAukciju.setVisible(false);
                btnIzmeni.setVisible(false);
                btnAzuriraj.setVisible(false);
                btnSveStavke.setVisible(false);
                btnUnesiAntikvitet.setEnabled(true);
                btnSacuvaj.setEnabled(true);

                txtNaziv.setEnabled(true);
                txtDatum.setEnabled(true);
                txtCena.setEnabled(true);
                cmbMesto.setEnabled(true);
                cmbAntikviteti.setEnabled(true);
                cmbValuta.setEnabled(true);
                break;
            case FormView.FORM_EDIT_MODE:
                btnIzbaciStavku.setVisible(true);
                btnObrisiAukciju.setVisible(true);
                btnIzmeni.setVisible(true);
                btnAzuriraj.setVisible(true);
                btnSveStavke.setVisible(true);

                btnSveStavke.setEnabled(true);
                btnAzuriraj.setEnabled(true);
                btnIzmeni.setEnabled(false);
                btnIzbaciStavku.setEnabled(true);
                btnObrisiAukciju.setEnabled(true);

                btnSacuvaj.setEnabled(false);
                btnUnesiAntikvitet.setEnabled(true);

                txtCena.setEnabled(true);
                txtDatum.setEnabled(true);
                txtNaziv.setEnabled(true);
                cmbMesto.setEnabled(true);
                cmbAntikviteti.setEnabled(true);
                cmbValuta.setEnabled(true);
                break;
            case FormView.FORM_VIEW_MODE:
                btnIzbaciStavku.setVisible(true);
                btnObrisiAukciju.setVisible(true);
                btnIzmeni.setVisible(true);
                btnAzuriraj.setVisible(true);
                btnSveStavke.setVisible(true);

                btnSveStavke.setEnabled(false);
                btnAzuriraj.setEnabled(false);
                btnIzmeni.setEnabled(true);
                btnIzbaciStavku.setEnabled(false);
                btnObrisiAukciju.setEnabled(true);

                btnSacuvaj.setEnabled(false);
                btnUnesiAntikvitet.setEnabled(false);

                txtCena.setEnabled(false);
                txtDatum.setEnabled(false);
                txtNaziv.setEnabled(false);
                cmbMesto.setEnabled(false);
                cmbAntikviteti.setEnabled(false);
                cmbValuta.setEnabled(false);
                break;
        }
    }

    private Aukcija getAukcija() {
        Aukcija a = new Aukcija(0, txtNaziv.getText(), datum, (Mesto) cmbMesto.getSelectedItem());
        if (this.a != null) {
            a.setId(this.a.getId());
        }

        return a;

    }

    private int obrisiAntikvitetSaSpiska(int brojka) {
        if (brojka == -1) {
            JOptionPane.showMessageDialog(this, "Niste izabrali prodat antikvitet");
        } else {
            try {
                if (brojka < prodati.size()) {
                    ProdajaAntikviteta p = prodati.get(brojka);
                    int broj = Komunikacija.getInstance().ObrisiProdajaAntikviteta(p);
                    return broj;
                } else {
                    ProdajaAntikviteta p = ukupno.get(brojka);
                    int broj = Komunikacija.getInstance().ObrisiProdajaAntikviteta(p);
                    return broj;
                }

            } catch (Exception ex) {
                Logger.getLogger(KreiranjeAukcije.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        uzmiProdateAntikvitete();
        return 0;
    }
}
