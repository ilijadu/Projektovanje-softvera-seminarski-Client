/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;

import domain.Antikvitet;
import domain.Mesto;
import domain.Vlasnik;
import forms.util.FormView;
import forms.util.ModelTabele;
import java.awt.Color;
import java.awt.HeadlessException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import komunikacija.Komunikacija;
import model.AntikvitetiTableModel;
import model.nit.NitTabele;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.autocomplete.AutoCompleteDocument;
import transfer.Response;

/**
 *
 * @author Ilija Dumanović
 */
public class KreiranjeVlasnika extends javax.swing.JFrame {

    /**
     * Creates new form KreiranjeVlasnika
     */
    List<Antikvitet> antikviteti;
    Vlasnik v;
    final DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    LocalDate datum;
    PretrazivanjeVlasnika pv;
    NitTabele n;
    AntikvitetiTableModel atm;

    public KreiranjeVlasnika(int formView) {
        initComponents();
        cbMesto.setSelectedItem(null);
        populateView(formView);
        populateForm();
    }

    public KreiranjeVlasnika(int formView, Vlasnik v, PretrazivanjeVlasnika pv) throws HeadlessException {
        initComponents();
        populateForm();
        setVlasnik(v);
        this.v = v;
        this.pv = pv;
        populateTable();
        populateView(formView);
        setVisible(true);
        JOptionPane.showMessageDialog(this, "Sistem je učitao odaranog vlasnika.");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlAntikviteti = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAntikviteti = new javax.swing.JTable();
        btnPrikaziAntikvitet = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        btnAzuriraj = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        txtPrezime = new javax.swing.JTextField();
        txtDatumRodjenja = new javax.swing.JTextField();
        cbMesto = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Kreiranje vlasnika");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlAntikviteti.setBorder(javax.swing.BorderFactory.createTitledBorder("Antikviteti koje vlasnik poseduje"));

        tblAntikviteti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblAntikviteti);

        btnPrikaziAntikvitet.setText("Prikazi antikvitet");
        btnPrikaziAntikvitet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrikaziAntikvitetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAntikvitetiLayout = new javax.swing.GroupLayout(pnlAntikviteti);
        pnlAntikviteti.setLayout(pnlAntikvitetiLayout);
        pnlAntikvitetiLayout.setHorizontalGroup(
            pnlAntikvitetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAntikvitetiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAntikvitetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlAntikvitetiLayout.createSequentialGroup()
                        .addComponent(btnPrikaziAntikvitet)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlAntikvitetiLayout.setVerticalGroup(
            pnlAntikvitetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAntikvitetiLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPrikaziAntikvitet)
                .addGap(116, 116, 116))
        );

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Omogući izmenu");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnAzuriraj.setText("Ažuriraj");
        btnAzuriraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAzurirajActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obriši");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        jLabel1.setText("Ime:");

        jLabel2.setText("Prezime:");

        jLabel3.setText("Datum rodjenja:");

        jLabel4.setText("Mesto:");

        txtDatumRodjenja.setForeground(new java.awt.Color(153, 153, 153));
        txtDatumRodjenja.setText("format: dd-mm-gggg");
        txtDatumRodjenja.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDatumRodjenjaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSacuvaj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIzmeni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAzuriraj)
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisi))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIme)
                            .addComponent(txtPrezime)
                            .addComponent(txtDatumRodjenja)
                            .addComponent(cbMesto, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(60, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAntikviteti, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDatumRodjenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSacuvaj)
                    .addComponent(btnIzmeni)
                    .addComponent(btnObrisi)
                    .addComponent(btnAzuriraj))
                .addGap(18, 18, 18)
                .addComponent(pnlAntikviteti, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(590, 587));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAzurirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAzurirajActionPerformed
        try {
            if (proveriValidnost()) {
                int br = Komunikacija.getInstance().ZapamtiVlasnika(getVlasnik());
                if (br > 0) {
                    JOptionPane.showMessageDialog(this, "Sistem je zapamtio vlasnika.", "Poruka", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti vlasnika! Pokušajte ponovo.", "Poruka", JOptionPane.ERROR_MESSAGE);
                }
                if (pv != null) {
                    pv.pretragaVlasnika();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(KreiranjeVlasnika.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAzurirajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        populateView(FormView.FORM_EDIT_MODE);
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        try {
            if (proveriValidnost()) {
                Vlasnik vlasnik = getVlasnik();
                Response response = Komunikacija.getInstance().KreirajVlasnika(vlasnik);
                if (response.getException() == null) {
                    int br = JOptionPane.showConfirmDialog(this, "Uspesno dodat vlasnik. Da li želite da dodate još jednog vlasnika", "Dodat vlasnik", JOptionPane.YES_NO_OPTION);
                    if (br == 1) {
                        this.dispose();
                    }
                    txtIme.setText("");
                    txtPrezime.setText("");
                    txtDatumRodjenja.setText("");
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(KreiranjeVlasnika.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        try {
            if (antikviteti.size() == 0) {
                int br = Komunikacija.getInstance().ObrisiVlasnika(getVlasnik());
                if (br > 0) {
                    JOptionPane.showMessageDialog(this, "Objekat je uspešno obrisan iz baze.", "Poruka", JOptionPane.OK_OPTION);
                } else {
                    JOptionPane.showMessageDialog(this, "Objekat je nije obirsan iz baze! Pokušajte ponovo.", "Poruka", JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Nije moguće obrisati vlasnika, jer poseduje antikvitete! Potrebno je prvo obrisati njegove sve antikvitete");
            }
        } catch (Exception ex) {
            Logger.getLogger(KreiranjeVlasnika.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnPrikaziAntikvitetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrikaziAntikvitetActionPerformed
        if (tblAntikviteti.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Molomo Vas da izaberete antikvitet pre prikazivanja detalja! ", "Poruka", JOptionPane.OK_OPTION);
        } else {
            uzmiAntikvitete();
            System.out.println("forms.KreiranjeVlasnika.btnPrikaziAntikvitetActionPerformed(), duzina anitkviteta: " + antikviteti.size());
            System.out.println("forms.KreiranjeVlasnika.btnPrikaziAntikvitetActionPerformed(), izabrani red: " + tblAntikviteti.getSelectedRow());
            Antikvitet a = antikviteti.get(tblAntikviteti.getSelectedRow());
            new KreiranjeAntikviteta(FormView.FORM_VIEW_MODE, a, null, this).setVisible(true);
            tblAntikviteti.getSelectionModel().clearSelection();
        }
    }//GEN-LAST:event_btnPrikaziAntikvitetActionPerformed

    private void txtDatumRodjenjaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDatumRodjenjaMouseClicked
        txtDatumRodjenja.setText("");
        txtDatumRodjenja.setForeground(Color.black);

    }//GEN-LAST:event_txtDatumRodjenjaMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //n.promeniSignal();
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAzuriraj;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnPrikaziAntikvitet;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbMesto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlAntikviteti;
    private javax.swing.JTable tblAntikviteti;
    private javax.swing.JTextField txtDatumRodjenja;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables

    private void populateView(int formView) {
        switch (formView) {
            case FormView.FORM_ADD_MODE:
                btnObrisi.setEnabled(false);
                btnIzmeni.setEnabled(false);
                btnAzuriraj.setEnabled(false);
                btnSacuvaj.setEnabled(true);
                txtIme.setEnabled(true);
                txtPrezime.setEnabled(true);
                txtDatumRodjenja.setEnabled(true);
                cbMesto.setEnabled(true);
                pnlAntikviteti.setVisible(false);
                this.setSize(537, 340);
                break;
            case FormView.FORM_EDIT_MODE:
                btnObrisi.setEnabled(false);
                btnIzmeni.setEnabled(false);
                btnAzuriraj.setEnabled(true);
                btnSacuvaj.setEnabled(false);
                txtIme.setEnabled(true);
                txtPrezime.setEnabled(true);
                txtDatumRodjenja.setEnabled(true);
                cbMesto.setEnabled(true);
                pnlAntikviteti.setVisible(true);
                break;
            case FormView.FORM_VIEW_MODE:
                btnIzmeni.setEnabled(true);
                btnObrisi.setEnabled(true);
                btnAzuriraj.setEnabled(false);
                btnSacuvaj.setEnabled(false);
                txtIme.setEnabled(false);
                txtPrezime.setEnabled(false);
                txtDatumRodjenja.setEnabled(false);
                cbMesto.setEnabled(false);
                pnlAntikviteti.setVisible(true);
                break;
        }
    }

    private Vlasnik getVlasnik() {
        Vlasnik v = new Vlasnik(0, txtIme.getText(), txtPrezime.getText(), datum, (Mesto) cbMesto.getSelectedItem());
        if (this.v != null) {
            v.setId(this.v.getId());
        }
        return v;

    }

    private void setVlasnik(Vlasnik v) {
        txtIme.setText(v.getIme());
        txtPrezime.setText(v.getPrezime());
        txtDatumRodjenja.setText(v.getDatumRodjenja().format(format).toString());
        txtDatumRodjenja.setForeground(Color.black);
        cbMesto.getModel().setSelectedItem(v.getMesto());
    }

    private void populateTable() {
        try {
            uzmiAntikvitete();
            System.out.println("forms.KreiranjeVlasnika.populateTable(), antikviteti kad se pokrene forma i kad se dodlei modelu: " + antikviteti);
            atm = new AntikvitetiTableModel(antikviteti, new Pair<String, String>("vlasnik_id", v.getId() + ""));
            atm.promeniSignal();
            tblAntikviteti.setModel(atm);
            System.out.println("forms.KreiranjeVlasnika.populateTable(), postavio model za tbl");
            //n = new NitTabele(tblAntikviteti, ModelTabele.ANTIKVITET_MODEL);
        } catch (Exception ex) {
            Logger.getLogger(KreiranjeVlasnika.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean proveriValidnost() {

        if (txtIme.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Neispravno uneto ime! Morate popuniti polje za ime!");
            return false;
        }
        char[] chars = txtIme.getText().toCharArray();
        for (char c : chars) {
            if (Character.isDigit(c)) {
                JOptionPane.showMessageDialog(this, "Ime ne sme sadržati cifre!");
                return false;
            }
        }

        if (txtPrezime.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Neispravno uneto prezime! Morate popuniti polje za prezime!");
            return false;
        }
        for (char c : chars) {
            if (Character.isDigit(c)) {
                JOptionPane.showMessageDialog(this, "Prezime ne sme sadržati cifre!");
                return false;
            }
        }
        try {
            datum = LocalDate.parse(txtDatumRodjenja.getText(), format);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Neispravno unet datum! Unesite datum u formatu dd-mm-gggg");
            return false;
        }
        if (datum.isAfter(LocalDate.now())) {
            JOptionPane.showMessageDialog(this, "Neispravno unet datum! Unesite datum pre današnjeg!");
            return false;
        }
        if (cbMesto.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Neispravno izabrali mesto!");
            return false;
        }
        return true;
    }

    private void populateForm() {
        try {
            List<Mesto> mesta = Komunikacija.getInstance().UcitajListuMesta();
            System.out.println("forms.KreiranjeVlasnika.populateForm(),mesta: " + mesta);
            cbMesto.setModel(new DefaultComboBoxModel(mesta.toArray()));
            AutoCompleteDecorator.decorate(cbMesto);
        } catch (Exception ex) {
            Logger.getLogger(KreiranjeVlasnika.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void uzmiAntikvitete() {
        try {
            System.out.println("forms.KreiranjeVlasnika.uzmiAntikvitete(),vlasnik je: " + v.toString());
            System.out.println("forms.KreiranjeVlasnika.uzmiAntikvitete(),vlasnik ID je: " + v.getId());
            antikviteti = Komunikacija.getInstance().UcitajAntikviteteSaParametrom(new Pair<String, String>("vlasnik_id", v.getId() + ""));
            System.out.println("forms.KreiranjeVlasnika.uzmiAntikvitete()" + antikviteti);
        } catch (Exception ex) {
            Logger.getLogger(PretrazivanjeAntikviteta.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void osveziTabelu() {
        uzmiAntikvitete();
        atm = new AntikvitetiTableModel(antikviteti, new Pair<String, String>("vlasnik_id", v.getId() + ""));
    }
}
